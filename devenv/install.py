from argparse import ArgumentParser
from functools import cache
import os.path
import re
from string import Template
import sys
from textwrap import dedent
from typing import Sequence


HOME_BIN = "~/bin"


def main(cmd_args: Sequence[str]) -> None:
    parser = get_parser()
    parsed_args = parser.parse_args(cmd_args)

    dev_env_dir = os.path.dirname(__file__)

    shell_init_path = os.path.expanduser(parsed_args.rc_file)
    home_bin = os.path.expanduser(parsed_args.bin_path)
    os.makedirs(home_bin, exist_ok=True)

    content = ""
    if os.path.exists(shell_init_path):
        with open(shell_init_path, "r") as f:
            content = dos2unix(f.read())

    # Write it back
    with open(shell_init_path, "w") as f:
        f.write(replace_contents(content, dev_env_dir, home_bin))

    links = [
        ("scripts/cli_echo.py", "cli-echo"),
        ("scripts/cli_echo_all.py", "cli-echo-all"),
        ("scripts/git_toplevel.sh", "gtl"),
        ("scripts/dedupe_path.py", "dedupe-path"),
    ]

    for rel_path, link_name in links:
        src = os.path.join(dev_env_dir, rel_path)
        dst = os.path.join(home_bin, link_name)
        try:
            # Remove existing file or symlink
            if os.path.exists(dst) or os.path.islink(dst):
                os.remove(dst)
            os.symlink(src, dst)
            print(f"Linked {link_name} -> {src}")
        except OSError as err:
            print(f"Failed to link {link_name} -> {src}: {err}", file=sys.stderr)


def get_parser() -> ArgumentParser:
    p = ArgumentParser(description="Install dev-bootstrap snippet and symlinks.")
    p.add_argument(
        "--rc-file",
        type=str,
        default="~/.bashrc",
        help="Path to the shell RC file to update (e.g., ~/.bashrc, ~/.zshrc).",
    )
    p.add_argument(
        "--bin-path",
        type=str,
        default="~/bin",
        help="Path to the shell RC file to update (e.g., ~/bin).",
    )
    return p


def replace_contents(orig_content: str, dev_env_dir: str, home_bin: str) -> str:
    pattern = re.compile(
        r"(?sx)"
        r"\n+"
        r"\#\ *\-+          \ dev-bootstrap\ \-{20,}\ *\n"
        r".*?"
        r"\#\ *\-{20,}"
        r"\n+"
    )
    broken_up = pattern.split(dos2unix(orig_content))
    insert_position = max(1, len(broken_up) - 1)

    snippet_text = dos2unix(
        get_template().safe_substitute(DEV_ENV_DIR=dev_env_dir, HOME_BIN=home_bin)
    ).strip()

    # Sanity-check: our generated snippet must actually be removable by `pattern`
    assert pattern.search("\n" + snippet_text + "\n"), (
        "snippet_text does not match the dev-bootstrap removal pattern! "
        f"{snippet_text!r}"
    )

    snippet_text = snippet_text.strip()
    broken_up.insert(insert_position, snippet_text)
    return "\n\n".join(broken_up)


def dos2unix(text: str) -> str:
    return text.replace("\r\n", "\n")


@cache
def get_template() -> Template:
    # Variables in the template: DEV_ENV_DIR, HOME_BIN
    return Template(
        dedent(
            r"""
    # --- dev-bootstrap ----------------------------------------------------
    # DO NOT EDIT THIS SECTION BY HAND.
    # AUTO-GENERATED BY $DEV_ENV_DIR/install.py
    # To refresh this section, re-run the installation script.
    
    source $DEV_ENV_DIR/shell_imports/git_basic_shortcuts.sh
    export PATH=$(python3 \
      "$DEV_ENV_DIR/scripts/dedupe_path.py" \
      "$HOME_BIN:$PATH" \
    )
    # ----------------------------------------------------------------------
    """
        )
    )


if __name__ == "__main__":
    main(sys.argv[1:])
